import { __awaiter } from "tslib";
import { ItemView, MarkdownRenderer, Component } from "obsidian";
import { SkillManager } from "./skills";
import { fetchQuery } from "./network";
const contentId = "dual-content";
const statusId = "dual-status";
export const inputId = "dual-input";
export default class ChatView extends ItemView {
    constructor(leaf, customName) {
        super(leaf);
        this.customName = "";
        this.customName = customName;
    }
    getViewType() {
        return "chat";
    }
    getDisplayText() {
        return "Dual";
    }
    getIcon() {
        return "info";
    }
    sendMessage() {
        const input = document.getElementById(inputId);
        let replied = false;
        if (input.value !== "") {
            this.drawMessage(input.value, "right");
            let typingPromise = new Promise((resolve) => setTimeout(resolve, 3000)).then(() => {
                if (replied == false) {
                    this.setStatus("typing...");
                }
            });
            // TODO: Move text sanitation code out of View
            var skillManager = new SkillManager(this.app);
            skillManager.followCommand(input.value).then((response) => {
                response
                    .toString()
                    .split("\n\n")
                    .forEach((res) => {
                    if (res.trim() != "") {
                        this.drawMessage(res, "left");
                    }
                });
                replied = true;
                this.setStatus("online");
            });
            input.value = "";
        }
    }
    makeRequest(query) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield fetchQuery(query);
            const responseJSON = yield response.json();
            return responseJSON;
        });
    }
    load() {
        super.load();
        this.draw();
    }
    draw() {
        const container = this.containerEl.children[1];
        // Root node
        const rootEl = document.createElement("div");
        rootEl.id = "dual-root";
        // Header
        const headerDiv = rootEl.createEl("header", {
            attr: { id: "dual-header" },
        });
        // Title and status
        headerDiv.createEl("h3", {
            cls: "dual-header-title",
            text: this.customName,
        });
        headerDiv.createEl("h6", { text: "Online", attr: { id: statusId } });
        // Conversation content
        rootEl.createDiv({ attr: { id: contentId } });
        // Footer
        const footerDiv = rootEl.createEl("footer", {
            attr: { id: "dual-footer" },
        });
        // Input element
        const input = footerDiv.createEl("input", {
            type: "text",
            attr: { id: inputId, size: 1 },
        });
        // Send button
        const button = footerDiv.createEl("button", {
            text: "Send",
            attr: { id: "dual-btn-send" },
        });
        this.registerDomEvent(button, "click", () => this.sendMessage());
        this.registerDomEvent(input, "keydown", (event) => {
            if (event.key === "Enter") {
                this.sendMessage();
            }
        });
        container.empty();
        container.appendChild(rootEl);
    }
    drawMessage(content, side) {
        const conversationDiv = document.getElementById(contentId);
        const msg = conversationDiv.createDiv({ cls: `dual-msg dual-msg-${side}` });
        MarkdownRenderer.renderMarkdown(content, msg, this.app.vault.getRoot().path, new Component());
        conversationDiv.scrollBy(0, 1000);
    }
    setStatus(content) {
        let statusP = document.getElementById(statusId);
        statusP.setText(content);
    }
}
//# sourceMappingURL=data:application/json;base64,