/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

var obsidian = require('obsidian');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

class ChatView extends obsidian.ItemView {
    constructor(leaf) {
        super(leaf);
    }
    getViewType() {
        return "chat";
    }
    getDisplayText() {
        return "Dual";
    }
    getIcon() {
        return "info";
    }
    sendMessage() {
        let input = document.getElementById('dual-input-box');
        let replied = false;
        if (input.value != '') {
            this.drawMessage(input.value, 'right');
            new Promise(resolve => setTimeout(resolve, 3000)).then(() => {
                if (replied == false) {
                    this.setStatus('typing...');
                }
            });
            this.makeRequest(input.value).then((response) => {
                if (response['intent'] == 'DESCRIPTIVE_SEARCH' || response['intent'] == 'FLUID_SEARCH') {
                    if (response['output'].length > 0) {
                        response['output'].forEach((element) => {
                            this.drawMessage(element.split('\\').pop().split('/').pop(), 'left');
                        });
                    }
                    else {
                        this.drawMessage('I can\'t find any relevant entries. Try a different search.', 'left');
                    }
                }
                else {
                    this.drawMessage(response['output'], 'left');
                }
                replied = true;
                this.setStatus('online');
            });
            input.value = '';
        }
    }
    makeRequest(query) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield fetch('http://127.0.0.1:5000/query/' + encodeURIComponent(query));
            const responseJSON = yield response.json();
            return responseJSON;
        });
    }
    load() {
        super.load();
        this.draw();
    }
    draw() {
        const container = this.containerEl.children[1];
        const rootEl = document.createElement('div');
        const headerDiv = rootEl.createDiv({ cls: 'nav-header' });
        const footerDiv = rootEl.createDiv({ cls: 'nav-header' });
        let header = headerDiv.createEl('h3');
        header.appendText('Dual');
        header.style.textAlign = 'left';
        header.style.marginTop = '0px';
        header.style.marginBottom = '0px';
        header.style.position = 'absolute';
        header.style.top = '15px';
        let status = headerDiv.createEl('h6');
        status.id = 'status';
        status.appendText('online');
        status.style.textAlign = 'left';
        status.style.marginTop = '0px';
        status.style.marginBottom = '5px';
        status.style.color = 'grey';
        let conversationDiv = headerDiv.createDiv({ cls: 'nav-header' });
        conversationDiv.id = 'conversationDiv';
        conversationDiv.style.padding = '0';
        conversationDiv.style.backgroundColor = 'var(--background-secondary-alt)';
        conversationDiv.style.position = 'absolute';
        conversationDiv.style.left = '0';
        conversationDiv.style.width = '100%';
        conversationDiv.style.paddingLeft = '10px';
        conversationDiv.style.paddingRight = '10px';
        conversationDiv.style.overflowY = 'scroll';
        conversationDiv.style.height = 'calc(100% - 110px)';
        let input = footerDiv.createEl('input');
        input.id = 'dual-input-box';
        input.type = 'text';
        input.style.fontSize = '0.8em';
        input.style.paddingInlineStart = '2%';
        input.style.paddingInlineEnd = '2%';
        input.style.marginTop = '0px';
        input.style.marginBottom = '10px';
        input.style.maxWidth = '68%';
        input.style.minWidth = '68%';
        input.style.position = 'absolute';
        input.style.bottom = '0';
        input.style.left = '5%';
        let button = footerDiv.createEl('button');
        button.appendText('Send');
        button.id = 'send-button';
        button.style.alignItems = 'left';
        button.style.paddingInlineStart = '2%';
        button.style.paddingInlineEnd = '2%';
        button.style.marginTop = '0px';
        button.style.marginBottom = '10px';
        button.style.width = '20%';
        button.style.position = 'absolute';
        button.style.bottom = '0';
        button.style.left = '75%';
        this.registerDomEvent(button, 'click', () => this.sendMessage());
        this.registerDomEvent(input, 'keydown', (event) => {
            if (event.key == 'Enter') {
                this.sendMessage();
            }
        });
        container.empty();
        container.appendChild(rootEl);
    }
    drawMessage(content, side) {
        let conversationDiv = document.getElementById('conversationDiv');
        let p = conversationDiv.createEl('p');
        p.appendText(content);
        p.style.textAlign = 'left';
        p.style.fontSize = '0.8em';
        p.style.borderRadius = '5px';
        p.style.lineHeight = '18px';
        p.style.padding = '5px';
        if (side == 'right') {
            p.style.backgroundColor = 'var(--background-primary)';
        }
        else {
            p.style.backgroundColor = 'var(--background-secondary)';
        }
        p.style.width = '90%';
        p.style.position = 'relative';
        if (side == 'right') {
            p.style.left = '10%';
        }
        conversationDiv.scrollBy(0, 1000);
    }
    setStatus(content) {
        let statusP = document.getElementById('status');
        statusP.setText(content);
    }
}

const DEFAULT_SETTINGS = {
    dualPath: 'default'
};
class MyPlugin extends obsidian.Plugin {
    onload() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.loadSettings();
            this.registerView('chat', (leaf) => {
                return new ChatView(leaf);
            });
            this.app.workspace.layoutReady && this.initLeaf(this.app.workspace);
            this.registerEvent(this.app.workspace.on('layout-ready', () => this.initLeaf(this.app.workspace)));
            this.addSettingTab(new SampleSettingTab(this.app, this));
            this.addCommand({
                id: 'focus-dual-input',
                name: 'Focus Dual input box',
                callback: () => {
                    document.getElementById('dual-input-box').focus();
                }
            });
        });
    }
    initLeaf(workspace) {
        if (workspace.getLeavesOfType('chat').length == 0) {
            workspace.getRightLeaf(false).setViewState({
                type: 'chat'
            });
        }
    }
    loadSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
        });
    }
    saveSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.saveData(this.settings);
        });
    }
}
class SampleSettingTab extends obsidian.PluginSettingTab {
    constructor(app, plugin) {
        super(app, plugin);
        this.app = app;
        this.plugin = plugin;
    }
    display() {
        let { containerEl } = this;
        containerEl.empty();
        containerEl.createEl('h3', { text: 'Follow these instructions to set up your Dual:' });
        new obsidian.Setting(containerEl)
            .setName('0. Install Python (3.8+).')
            .setDesc('Press the button to head over to the download page.')
            .addButton(cb => cb
            .setButtonText('Install Python')
            .setClass('mod-cta')
            .onClick(() => {
            window.open('https://www.python.org/downloads/');
        }));
        new obsidian.Setting(containerEl)
            .setName('1. Copy snapshot.')
            .setDesc('Press the button to copy the entire vault as concatenated plain text.')
            .addButton(cb => cb
            .setButtonText('Copy snapshot')
            .setClass('mod-cta')
            .onClick(() => {
            new obsidian.Notice('Loading files...');
            let concatenated = '';
            this.app.vault.getMarkdownFiles().forEach(element => {
                this.app.vault.cachedRead(element)
                    .then((res) => {
                    res = res
                        .replace(/---\n*.*\n*---\n*/g, '')
                        .replace(/\[\[[^\|\[\]]*\|([^\|\[\]]*)\]\]/g, '$1')
                        .replace(/\[\[(.*)\]\]/g, '$1')
                        .replace(/#.*\n/g, '');
                    concatenated = concatenated.concat(res, '\n\n');
                });
            });
            new Promise(resolve => setTimeout(resolve, 3000)).then(() => {
                this.copyStringToClipboard(concatenated);
                new obsidian.Notice('Snapshot successfully copied to clipboard!');
            });
        }));
        new obsidian.Setting(containerEl)
            .setName('2. Derive the essence.')
            .setDesc('After following the online instructions, extract \'essence.zip\' in \'.obsidian/plugins/Dual/\'.')
            .addButton(cb => cb
            .setButtonText('Start alignment')
            .setClass('mod-cta')
            .onClick(() => {
            window.open('https://colab.research.google.com/drive/1CObehan5gmYO-TvyyYq973a3h-_EYr9_?usp=sharing');
        }));
        new obsidian.Setting(containerEl)
            .setName('3. Configure theskeleton.')
            .setDesc('Run \'python3 -m pip install -r requirements.txt\' in \'.obsidian/plugins/Dual/skeleton/\'.');
        new obsidian.Setting(containerEl)
            .setName('4. Run the skeleton after you configured the essence.')
            .setDesc('Run \'python3 server.py --path /path/to/your/vault/\' in \'.obsidian/plugins/Dual/skeleton/\'.');
        new obsidian.Setting(containerEl)
            .setName('5. Restart Obsidian.')
            .setDesc('Head over to the right side panel to talk with your Dual!');
        containerEl.createEl('h3', { text: 'Congratulations on setting up your Dual!' });
        new obsidian.Setting(containerEl)
            .setName('Get involved!')
            .addButton(cb => cb
            .setButtonText('Report bugs')
            .setClass('mod-cta')
            .onClick(() => {
            window.open('https://github.com/Psionica/Dual/issues');
        }))
            .addButton(cb => cb
            .setButtonText('Join Psionica')
            .setClass('mod-cta')
            .onClick(() => {
            window.open('https://psionica.org/');
        }));
    }
    copyStringToClipboard(content) {
        var el = document.createElement('textarea');
        el.value = content;
        el.setAttribute('readonly', '');
        document.body.appendChild(el);
        el.select();
        document.execCommand('copy');
        document.body.removeChild(el);
    }
}

module.exports = MyPlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
