"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
var visit = require("unist-util-visit");
var prettier_1 = require("prettier");
var core_1 = require("@babel/core");
function insertAt(array, index, item) {
    return __spreadArrays(array.slice(0, index), [item], array.slice(index));
}
function isReactComponent(node, tag) {
    return node && node.type === 'jsx' && node.value === tag;
}
var PRESERVE_COMMENT = '// preserve-line';
var PRESERVE_PATTERN = new RegExp("\\s" + PRESERVE_COMMENT + "$");
function removePreserveComment(line) {
    return line.replace(PRESERVE_PATTERN, '');
}
module.exports = function remarkTypescript(_a) {
    var _b = _a === void 0 ? {} : _a, wrapperComponent = _b.wrapperComponent, _c = _b.prettierOptions, prettierOptions = _c === void 0 ? {} : _c;
    return function transformer(tree) {
        function visitor(node, index, parent) {
            if (/^tsx?/.test(node.lang)) {
                var prevNode = parent.children[index - 1];
                var nextNode = parent.children[index + 1];
                if (wrapperComponent) {
                    var isWrapped = isReactComponent(prevNode, "<" + wrapperComponent + ">") &&
                        isReactComponent(nextNode, "</" + wrapperComponent + ">");
                    if (!isWrapped) {
                        return;
                    }
                }
                try {
                    var lines = node.value.split('\n');
                    var code = core_1.transformSync(lines
                        .map(function (line) {
                        return PRESERVE_PATTERN.test(line) ? '// ' + line : line;
                    })
                        .join('\n'), {
                        filename: "file." + node.lang,
                        retainLines: true,
                        presets: ['@babel/typescript']
                    }).code;
                    if (code.trim()) {
                        parent.children = insertAt(parent.children, index + 1, {
                            type: 'code',
                            lang: node.lang.replace(/^ts|(?<=\.)ts/g, 'js'),
                            value: prettier_1.format(code
                                .split('\n')
                                .map(function (line) {
                                return PRESERVE_PATTERN.test(line)
                                    ? removePreserveComment(line.replace(/^\/\/\s/, ''))
                                    : line;
                            })
                                .join('\n'), __assign(__assign({}, prettierOptions), { parser: 'babel' })).trim()
                        });
                    }
                    node.value = lines.map(removePreserveComment).join('\n');
                }
                catch (error) {
                    console.error(error.message);
                }
            }
        }
        visit(tree, 'code', visitor);
    };
};
