/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

var obsidian = require('obsidian');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

class ChatView extends obsidian.ItemView {
    constructor(leaf, customName) {
        super(leaf);
        this.customName = "";
        this.customName = customName;
    }
    getViewType() {
        return "chat";
    }
    getDisplayText() {
        return "Dual";
    }
    getIcon() {
        return "info";
    }
    sendMessage() {
        let input = document.getElementById("dual-input-box");
        let replied = false;
        if (input.value != "") {
            this.drawMessage(input.value, "right");
            new Promise((resolve) => setTimeout(resolve, 3000)).then(() => {
                if (replied == false) {
                    this.setStatus("typing...");
                }
            });
            this.makeRequest(input.value).then((response) => {
                if (response["intent"] == "DESCRIPTIVE_SEARCH" ||
                    response["intent"] == "FLUID_SEARCH") {
                    if (response["output"].length > 0) {
                        response["output"].forEach((element) => {
                            this.drawMessage(element
                                .split("\\")
                                .pop()
                                .split("/")
                                .pop(), "left");
                        });
                    }
                    else {
                        this.drawMessage("I can't find any relevant entries. Try a different search.", "left");
                    }
                }
                else {
                    this.drawMessage(response["output"], "left");
                }
                replied = true;
                this.setStatus("online");
            });
            input.value = "";
        }
    }
    makeRequest(query) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield fetch("http://127.0.0.1:5000/query/" + encodeURIComponent(query));
            const responseJSON = yield response.json();
            return responseJSON;
        });
    }
    load() {
        super.load();
        this.draw();
    }
    draw() {
        const container = this.containerEl.children[1];
        const rootEl = document.createElement("div");
        const headerDiv = rootEl.createDiv({ cls: "nav-header" });
        const footerDiv = rootEl.createDiv({ cls: "nav-header" });
        let header = headerDiv.createEl("h3");
        header.appendText(this.customName);
        header.style.textAlign = "left";
        header.style.marginTop = "0px";
        header.style.marginBottom = "0px";
        header.style.position = "absolute";
        header.style.top = "15px";
        let status = headerDiv.createEl("h6");
        status.id = "status";
        status.appendText("online");
        status.style.textAlign = "left";
        status.style.marginTop = "0px";
        status.style.marginBottom = "5px";
        status.style.color = "grey";
        let conversationDiv = headerDiv.createDiv({ cls: "nav-header" });
        conversationDiv.id = "conversationDiv";
        conversationDiv.style.padding = "0";
        conversationDiv.style.backgroundColor = "var(--background-secondary-alt)";
        conversationDiv.style.position = "absolute";
        conversationDiv.style.left = "0";
        conversationDiv.style.width = "100%";
        conversationDiv.style.paddingLeft = "10px";
        conversationDiv.style.paddingRight = "10px";
        conversationDiv.style.overflowY = "scroll";
        conversationDiv.style.height = "calc(100% - 110px)";
        let input = footerDiv.createEl("input");
        input.id = "dual-input-box";
        input.type = "text";
        input.style.fontSize = "0.8em";
        input.style.paddingInlineStart = "2%";
        input.style.paddingInlineEnd = "2%";
        input.style.marginTop = "0px";
        input.style.marginBottom = "10px";
        input.style.maxWidth = "68%";
        input.style.minWidth = "68%";
        input.style.position = "absolute";
        input.style.bottom = "0";
        input.style.left = "5%";
        let button = footerDiv.createEl("button");
        button.appendText("Send");
        button.id = "send-button";
        button.style.alignItems = "left";
        button.style.paddingInlineStart = "2%";
        button.style.paddingInlineEnd = "2%";
        button.style.marginTop = "0px";
        button.style.marginBottom = "10px";
        button.style.width = "20%";
        button.style.position = "absolute";
        button.style.bottom = "0";
        button.style.left = "75%";
        this.registerDomEvent(button, "click", () => this.sendMessage());
        this.registerDomEvent(input, "keydown", (event) => {
            if (event.key == "Enter") {
                this.sendMessage();
            }
        });
        container.empty();
        container.appendChild(rootEl);
    }
    drawMessage(content, side) {
        let conversationDiv = (document.getElementById("conversationDiv"));
        let p = conversationDiv.createEl("p");
        p.appendText(content);
        p.style.userSelect = "text";
        p.style.textAlign = "left";
        p.style.fontSize = "0.8em";
        p.style.borderRadius = "5px";
        p.style.lineHeight = "18px";
        p.style.padding = "5px";
        if (side == "right") {
            p.style.backgroundColor = "var(--background-primary)";
        }
        else {
            p.style.backgroundColor = "var(--background-secondary)";
        }
        p.style.width = "90%";
        p.style.position = "relative";
        if (side == "right") {
            p.style.left = "10%";
        }
        conversationDiv.scrollBy(0, 1000);
    }
    setStatus(content) {
        let statusP = document.getElementById("status");
        statusP.setText(content);
    }
}

var Utils;
(function (Utils) {
    function copyStringToClipboard(content) {
        var el = document.createElement('textarea');
        el.value = content;
        el.setAttribute('readonly', '');
        document.body.appendChild(el);
        el.select();
        document.execCommand('copy');
        document.body.removeChild(el);
    }
    Utils.copyStringToClipboard = copyStringToClipboard;
    function removeMd(md, options) {
        options = options || {};
        options.listUnicodeChar = options.hasOwnProperty('listUnicodeChar') ? options.listUnicodeChar : false;
        options.stripListLeaders = options.hasOwnProperty('stripListLeaders') ? options.stripListLeaders : true;
        options.gfm = options.hasOwnProperty('gfm') ? options.gfm : true;
        options.useImgAltText = options.hasOwnProperty('useImgAltText') ? options.useImgAltText : true;
        var output = md || '';
        output = output.replace(/^(-\s*?|\*\s*?|_\s*?){3,}\s*$/gm, '');
        try {
            if (options.stripListLeaders) {
                if (options.listUnicodeChar)
                    output = output.replace(/^([\s\t]*)([\*\-\+]|\d+\.)\s+/gm, options.listUnicodeChar + ' $1');
                else
                    output = output.replace(/^([\s\t]*)([\*\-\+]|\d+\.)\s+/gm, '$1');
            }
            if (options.gfm) {
                output = output
                    // Header
                    .replace(/\n={2,}/g, '\n')
                    // Fenced codeblocks
                    .replace(/~{3}.*\n/g, '')
                    // Strikethrough
                    .replace(/~~/g, '')
                    // Fenced codeblocks
                    .replace(/`{3}.*\n/g, '');
            }
            output = output
                // Remove HTML tags
                .replace(/<[^>]*>/g, '')
                // Remove setext-style headers
                .replace(/^[=\-]{2,}\s*$/g, '')
                // Remove footnotes?
                .replace(/\[\^.+?\](\: .*?$)?/g, '')
                .replace(/\s{0,2}\[.*?\]: .*?$/g, '')
                // Remove images
                .replace(/\!\[(.*?)\][\[\(].*?[\]\)]/g, options.useImgAltText ? '$1' : '')
                // Remove inline links
                .replace(/\[(.*?)\][\[\(].*?[\]\)]/g, '$1')
                // Remove blockquotes
                .replace(/^\s{0,3}>\s?/g, '')
                // Remove reference-style links?
                .replace(/^\s{1,2}\[(.*?)\]: (\S+)( ".*?")?\s*$/g, '')
                // Remove atx-style headers
                .replace(/^(\n)?\s{0,}#{1,6}\s+| {0,}(\n)?\s{0,}#{0,} {0,}(\n)?\s{0,}$/gm, '$1$2$3')
                // Remove emphasis (repeat the line to remove double emphasis)
                .replace(/([\*_]{1,3})(\S.*?\S{0,1})\1/g, '$2')
                .replace(/([\*_]{1,3})(\S.*?\S{0,1})\1/g, '$2')
                // Remove code blocks
                .replace(/(`{3,})(.*?)\1/gm, '$2')
                // Remove inline code
                .replace(/`(.+?)`/g, '$1')
                // Replace two or more newlines with exactly two? Not entirely sure this belongs here...
                .replace(/\n{2,}/g, '\n\n');
        }
        catch (e) {
            console.error(e);
            return md;
        }
        return output;
    }
    Utils.removeMd = removeMd;
})(Utils || (Utils = {}));

var Recipes;
(function (Recipes) {
    function runCommand(app, query) {
        return __awaiter(this, void 0, void 0, function* () {
            var recipePath = yield matchQuery(app, query);
            var output = followRecipe(app, recipePath, query);
            return output;
        });
    }
    Recipes.runCommand = runCommand;
    function followRecipe(app, path, query) {
        return __awaiter(this, void 0, void 0, function* () {
            var recipeContents = yield getRecipeContents(app, path);
            var outputPattern = yield getOutputPattern(app, path);
            var placeholders = yield getPlaceholders(app, recipeContents);
            var ingredients = yield getIngredients(query, placeholders);
            recipeContents = removeFrontMatter(recipeContents);
            recipeContents = resolvePlaceholders(recipeContents, placeholders, ingredients);
            var codeBlocks = detectCodeBlocks(recipeContents);
            var [splitBlockList, blockTypes] = splitBlocks(recipeContents, codeBlocks);
            var [splitBlockList, textSoFar] = interpretBlocks(splitBlockList, blockTypes);
            var output = resolveOutputReferences(splitBlockList, textSoFar, outputPattern);
            return output;
        });
    }
    Recipes.followRecipe = followRecipe;
    // Walk through blocks and take actions based on them
    function interpretBlocks(splitBlocks, blockTypes) {
        var newText, textSoFar = "";
        for (let index = 0; index < splitBlocks.length; index++) {
            newText = resolveBodyReferences(splitBlocks, index, textSoFar);
            splitBlocks[index] = newText;
            switch (blockTypes[index]) {
                case "text":
                    textSoFar = textSoFar.concat(newText);
                    break;
                case "js":
                    splitBlocks[index] = eval(splitBlocks[index]);
                    textSoFar = textSoFar.concat(splitBlocks[index]);
                    break;
                case "dual":
                    splitBlocks[index] = "\n<" + newText + ">\n"; // TODO change to execute command 
                    textSoFar = textSoFar.concat(splitBlocks[index]);
            }
        }
        return [splitBlocks, textSoFar];
    }
    Recipes.interpretBlocks = interpretBlocks;
    // Fill in "#N" structures in recipe output based on reference code block output
    function resolveOutputReferences(splitBlocks, textSoFar, outputPattern) {
        outputPattern = outputPattern.replace("#0", textSoFar);
        for (let referencedCodeBlock = 1; referencedCodeBlock <= 10; referencedCodeBlock++) {
            outputPattern = outputPattern.replace("#" + referencedCodeBlock, splitBlocks[referencedCodeBlock * 2 - 1]);
        }
        return outputPattern;
    }
    Recipes.resolveOutputReferences = resolveOutputReferences;
    // Fill in "#N" structures in recipe body based on reference code block output
    function resolveBodyReferences(splitBlocks, reachedIndex, textSoFar) {
        var newText = splitBlocks[reachedIndex].trim();
        newText = newText.replace("#0", textSoFar);
        for (let referencedCodeBlock = 1; referencedCodeBlock <= reachedIndex / 2; referencedCodeBlock++) {
            newText = newText.replace("#" + referencedCodeBlock, splitBlocks[referencedCodeBlock * 2 - 1]);
        }
        return newText;
    }
    Recipes.resolveBodyReferences = resolveBodyReferences;
    // Get list of all blocks with type and contents
    function splitBlocks(recipeContents, codeBlocks) {
        var splitBlockList = [recipeContents], blockTypes = ["text"];
        for (let index = 0; index < codeBlocks.length; index++) {
            splitBlockList.push(codeBlocks[index]["contents"]);
            blockTypes.push(codeBlocks[index]["type"]);
            splitBlockList.push(splitBlockList[2 * index].slice(codeBlocks[index]["end"]));
            blockTypes.push("text");
            splitBlockList[2 * index] = splitBlockList[2 * index].slice(0, codeBlocks[index]["start"]);
            for (let indexFuture = index + 1; indexFuture < codeBlocks.length; indexFuture++) {
                codeBlocks[indexFuture]["start"] -= splitBlockList[2 * index].length + codeBlocks[index]["end"] - codeBlocks[index]["start"];
                codeBlocks[indexFuture]["end"] -= splitBlockList[2 * index].length + codeBlocks[index]["end"] - codeBlocks[index]["start"];
            }
        }
        splitBlockList.forEach((val, index, arr) => {
            arr[index] = val.trim();
        });
        return [splitBlockList, blockTypes];
    }
    Recipes.splitBlocks = splitBlocks;
    // Get a list of code blocks with details
    function detectCodeBlocks(recipeContents) {
        var m, res = [], re = RegExp(/\`\`\`(?<type>\w+)(?<contents>[^\`]*)\`\`\`/, "g");
        do {
            m = re.exec(recipeContents);
            if (m) {
                res = res.concat({
                    type: m["groups"]["type"],
                    contents: m["groups"]["contents"].trim(),
                    start: m["index"],
                    end: m["index"] + m[0].length
                });
            }
        } while (m);
        return res;
    }
    Recipes.detectCodeBlocks = detectCodeBlocks;
    // Get list of ingredient names mentioned in a recipe
    function getPlaceholders(app, recipeContents) {
        return __awaiter(this, void 0, void 0, function* () {
            var re = /\*[^\*]*\*/g;
            var placeholders = recipeContents.match(re);
            placeholders.forEach((val, index, placeholders) => {
                placeholders[index] = val.substring(1, val.length - 1);
            });
            return placeholders;
        });
    }
    Recipes.getPlaceholders = getPlaceholders;
    // Parse ingredients from the query
    function getIngredients(query, placeholders) {
        return __awaiter(this, void 0, void 0, function* () {
            var ingredients = [], res;
            for (let index = 0; index < placeholders.length; index++) {
                res = yield getIngredient(query, placeholders[index]);
                ingredients = ingredients.concat(res);
            }
            return ingredients;
        });
    }
    Recipes.getIngredients = getIngredients;
    // Parse one ingredient from the query
    function getIngredient(query, placeholder) {
        return __awaiter(this, void 0, void 0, function* () {
            var prompt = getIngredientPrompt + query + "\n" + placeholder + ': "';
            const rawResponse = yield fetch("http://127.0.0.1:5000/generate/", {
                method: "POST",
                headers: {
                    Accept: "application/json",
                    "Content-Type": "application/json",
                },
                body: JSON.stringify({
                    prompt: prompt,
                    early_stopping_criterion: "finish_paragraph",
                    max_generated_token_count: Math.floor(query.length * 0.3),
                }),
            });
            var content = yield rawResponse.json();
            content = content["output"][0];
            content = content.split('"')[0];
            return content;
        });
    }
    Recipes.getIngredient = getIngredient;
    // Get two parallel lists of query examples and the paths they originate from
    function getExamples(app) {
        var examples = [];
        var paths = [];
        app.vault.getMarkdownFiles().forEach((file) => {
            if (file.path.startsWith("dual-recipes")) {
                app.metadataCache
                    .getFileCache(file)
                    .frontmatter["examples"].forEach((example) => {
                    examples = examples.concat(example);
                    paths = paths.concat(file.path);
                });
            }
        });
        return [examples, paths];
    }
    Recipes.getExamples = getExamples;
    // Get contents of a recipe at a path
    function getRecipeContents(app, path) {
        return __awaiter(this, void 0, void 0, function* () {
            var markdownFiles = app.vault.getMarkdownFiles();
            for (let index = 0; index < markdownFiles.length; index++) {
                if (markdownFiles[index].path == path) {
                    return yield app.vault.cachedRead(markdownFiles[index]);
                }
            }
        });
    }
    Recipes.getRecipeContents = getRecipeContents;
    // Get output pattern of a recipe at a path
    function getOutputPattern(app, path) {
        return __awaiter(this, void 0, void 0, function* () {
            var markdownFiles = app.vault.getMarkdownFiles();
            for (let index = 0; index < markdownFiles.length; index++) {
                if (markdownFiles[index].path == path) {
                    return app.metadataCache
                        .getFileCache(markdownFiles[index])
                        .frontmatter["output"];
                }
            }
        });
    }
    Recipes.getOutputPattern = getOutputPattern;
    // Find closest recipe to a given query through examples
    function matchQuery(app, query) {
        return __awaiter(this, void 0, void 0, function* () {
            var examplePathPairs = getExamples(app);
            var examples = examplePathPairs[0], paths = examplePathPairs[1];
            const rawResponse = yield fetch("http://127.0.0.1:5000/extract/", {
                method: "POST",
                headers: {
                    Accept: "application/json",
                    "Content-Type": "application/json",
                },
                body: JSON.stringify({
                    query: query,
                    documents: examples,
                    selected_candidates: 1,
                }),
            });
            var content = yield rawResponse.json();
            return paths[content["output"][0]];
        });
    }
    Recipes.matchQuery = matchQuery;
    // Substitute placeholders with ingredients in a recipe
    function resolvePlaceholders(recipeContents, placeholders, ingredients) {
        for (let index = 0; index < placeholders.length; index++) {
            var re = RegExp("\\*" + placeholders[index] + "\\*", "g");
            recipeContents = recipeContents.replace(re, ingredients[index]);
        }
        return recipeContents;
    }
    Recipes.resolvePlaceholders = resolvePlaceholders;
    function removeFrontMatter(recipeContents) {
        recipeContents = recipeContents.replace(/---[\s\S]*---/g, "");
        return recipeContents.trim();
    }
    Recipes.removeFrontMatter = removeFrontMatter;
    const getIngredientPrompt = `query: Come up with a writing prompt about aliens and robots.
topic: "aliens and robots"

query: Einstein, what is general relativity?
person: "Einstein"

query: Come up with a fitting term for a metaphor which bridges disparate fields.
description: "a metaphor which bridges disparate fields"

query: Write a Python query which reverses the contents of a list.
description: "reverses the contents of a list"

query: How could one operationalize working memory capacity?
concept: "working memory capacity"

query: What specific operations should I perform to model an airplane in Blender?
object: "airplane"

query: What would be a useful analogy for understanding pupillometry?
concept: "pupillometry"

query: What are some possible applications of brain-computer interfaces?
technology: "brain-computer interfaces"

query: How can I say "sprandel" in Romanian?
language: "Romanian"

query: How would a school look like in Victorian London?
context: "Victorian London"

query: Come up with a setting for a science fiction book.
genre: "science fiction"

query: Try to come up with an exercise on thermodynamics.
subject: "thermodynamics"

query: Darwin, what is the origin of species?
person: "Darwin"

query: Look for notes about evolution.
topic: "evolution"

query: Isaac Asimov, come up with a writing prompt about space exploration.
person: "Isaac Asimov" 

query: `;
})(Recipes || (Recipes = {}));

const DEFAULT_SETTINGS = {
    customName: "Dual",
};
class MyPlugin extends obsidian.Plugin {
    onload() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.loadSettings();
            this.registerView("chat", (leaf) => {
                return new ChatView(leaf, this.settings.customName);
            });
            this.app.workspace.layoutReady && this.initLeaf(this.app.workspace);
            this.registerEvent(this.app.workspace.on("layout-ready", () => this.initLeaf(this.app.workspace)));
            this.addSettingTab(new SampleSettingTab(this.app, this));
            this.addCommand({
                id: "focus-dual-input",
                name: "Focus Dual input box",
                callback: () => {
                    document.getElementById("dual-input-box").focus();
                },
            });
        });
    }
    initLeaf(workspace) {
        if (workspace.getLeavesOfType("chat").length == 0) {
            workspace.getRightLeaf(false).setViewState({
                type: "chat",
            });
        }
    }
    loadSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
        });
    }
    saveSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.saveData(this.settings);
        });
    }
}
class SampleSettingTab extends obsidian.PluginSettingTab {
    constructor(app, plugin) {
        super(app, plugin);
        this.app = app;
        this.plugin = plugin;
    }
    display() {
        let { containerEl } = this;
        containerEl.empty();
        containerEl.createEl("h3", {
            text: "Follow these instructions to set up your Dual:",
        });
        new obsidian.Setting(containerEl).setName("RECIPE TEST").addButton((cb) => cb
            .setButtonText("Test")
            .setClass("mod-cta")
            .onClick(() => __awaiter(this, void 0, void 0, function* () {
            console.log(yield Recipes.getIngredient("Come up with an application of blockchain in advertising.", "field"));
        })));
        new obsidian.Setting(containerEl)
            .setName("0. Install Python (3.8+).")
            .setDesc("Press the button to head over to the download page.")
            .addButton((cb) => cb
            .setButtonText("Install Python")
            .setClass("mod-cta")
            .onClick(() => {
            window.open("https://www.python.org/downloads/");
        }));
        new obsidian.Setting(containerEl)
            .setName("1. Copy snapshot.")
            .setDesc("Press the button to copy the entire vault as concatenated plain text.")
            .addButton((cb) => cb
            .setButtonText("Copy snapshot")
            .setClass("mod-cta")
            .onClick(() => {
            new obsidian.Notice("Loading files...");
            let concatenated = "";
            this.app.vault.getMarkdownFiles().forEach((element) => {
                this.app.vault.cachedRead(element).then((res) => {
                    res = res
                        .replace(/^---[\s\S]*---\n*/g, "")
                        .replace(/\[\[[^\|\[\]]*\|([^\|\[\]]*)\]\]/g, "$1")
                        .replace(/\[\[(.*)\]\]/g, "$1")
                        .replace(/```([^`])*```\n*/g, "")
                        .replace(/\$([^$])*\$*/g, "");
                    concatenated = concatenated.concat(res, "\n\n");
                });
            });
            new Promise((resolve) => setTimeout(resolve, 3000)).then(() => {
                concatenated = concatenated.slice(0, 5000000);
                concatenated = Utils.removeMd(concatenated, {});
                Utils.copyStringToClipboard(concatenated);
                new obsidian.Notice("Snapshot successfully copied to clipboard!");
            });
        }));
        new obsidian.Setting(containerEl)
            .setName("2. Derive the essence.")
            .setDesc("After following the online instructions, extract 'essence.zip' in '.obsidian/plugins/Dual/'.")
            .addButton((cb) => cb
            .setButtonText("Start alignment")
            .setClass("mod-cta")
            .onClick(() => {
            window.open("https://colab.research.google.com/drive/1CObehan5gmYO-TvyyYq973a3h-_EYr9_?usp=sharing");
        }));
        new obsidian.Setting(containerEl)
            .setName("3. Configure the skeleton.")
            .setDesc("Run 'python3 -m pip install -r requirements.txt' in '.obsidian/plugins/Dual/skeleton/'.");
        new obsidian.Setting(containerEl)
            .setName("4. Run the skeleton after you configured the essence.")
            .setDesc("Run 'python3 server.py --path /path/to/your/vault/' in '.obsidian/plugins/Dual/skeleton/'.");
        new obsidian.Setting(containerEl)
            .setName("5. Restart Obsidian.")
            .setDesc("Head over to the right side panel to talk with your Dual!");
        containerEl.createEl("h3", {
            text: "Congratulations on setting up your Dual!",
        });
        new obsidian.Setting(containerEl)
            .setName("Custom name")
            .setDesc("Customize your Dual's name using the input box. Reload Obsidian for this to take effect.")
            .addText((text) => text
            .setPlaceholder("Dual")
            .setValue("")
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.customName = value;
            yield this.plugin.saveSettings();
        })));
        new obsidian.Setting(containerEl)
            .setName("Get involved!")
            .addButton((cb) => cb
            .setButtonText("Report bugs")
            .setClass("mod-cta")
            .onClick(() => {
            window.open("https://github.com/Psionica/Dual/issues");
        }))
            .addButton((cb) => cb
            .setButtonText("Join Psionica")
            .setClass("mod-cta")
            .onClick(() => {
            window.open("https://psionica.org/");
        }));
    }
}

module.exports = MyPlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
