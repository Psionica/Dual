/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

var obsidian = require('obsidian');
var fs = require('fs');

function _interopNamespace(e) {
    if (e && e.__esModule) return e;
    var n = Object.create(null);
    if (e) {
        Object.keys(e).forEach(function (k) {
            if (k !== 'default') {
                var d = Object.getOwnPropertyDescriptor(e, k);
                Object.defineProperty(n, k, d.get ? d : {
                    enumerable: true,
                    get: function () {
                        return e[k];
                    }
                });
            }
        });
    }
    n['default'] = e;
    return Object.freeze(n);
}

var fs__namespace = /*#__PURE__*/_interopNamespace(fs);

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    if (typeof b !== "function" && b !== null)
        throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

var Utils;
(function (Utils) {
    function copyStringToClipboard(content) {
        var el = document.createElement("textarea");
        el.value = content;
        el.setAttribute("readonly", "");
        document.body.appendChild(el);
        el.select();
        document.execCommand("copy");
        document.body.removeChild(el);
    }
    Utils.copyStringToClipboard = copyStringToClipboard;
    function getOS() {
        if (window.navigator.userAgent.indexOf("Windows NT 10.0") != -1)
            return "windows";
        if (window.navigator.userAgent.indexOf("Mac") != -1)
            return "macos";
        if (window.navigator.userAgent.indexOf("Linux") != -1)
            return "linux";
    }
    Utils.getOS = getOS;
    function removeMd(md, options) {
        if (options === void 0) { options = {
            listUnicodeChar: "",
            stripListLeaders: true,
            gfm: true,
            useImgAltText: true
        }; }
        var output = md
            .replace(/^---[\s\S]*---\n*/g, "")
            .replace(/\[\[[^\|\[\]]*\|([^\|\[\]]*)\]\]/g, "$1")
            .replace(/\[\[(.*)\]\]/g, "$1")
            .replace(/```([^`])*```\n*/g, "")
            .replace(/\$([^$])*\$*/g, "")
            .replace(/^(-\s*?|\*\s*?|_\s*?){3,}\s*$/gm, "");
        try {
            if (options.stripListLeaders) {
                if (options.listUnicodeChar)
                    output = output.replace(/^([\s\t]*)([\*\-\+]|\d+\.)\s+/gm, options.listUnicodeChar + " $1");
                else
                    output = output.replace(/^([\s\t]*)([\*\-\+]|\d+\.)\s+/gm, "$1");
            }
            if (options.gfm) {
                output = output
                    // Header
                    .replace(/\n={2,}/g, "\n")
                    // Fenced codeblocks
                    .replace(/~{3}.*\n/g, "")
                    // Strikethrough
                    .replace(/~~/g, "")
                    // Fenced codeblocks
                    .replace(/`{3}.*\n/g, "");
            }
            output = output
                // Remove HTML tags
                .replace(/<[^>]*>/g, "")
                // Remove setext-style headers
                .replace(/^[=\-]{2,}\s*$/g, "")
                // Remove footnotes?
                .replace(/\[\^.+?\](\: .*?$)?/g, "")
                .replace(/\s{0,2}\[.*?\]: .*?$/g, "")
                // Remove images
                .replace(/\!\[(.*?)\][\[\(].*?[\]\)]/g, options.useImgAltText ? "$1" : "")
                // Remove inline links
                .replace(/\[(.*?)\][\[\(].*?[\]\)]/g, "$1")
                // Remove blockquotes
                .replace(/^\s{0,3}>\s?/g, "")
                // Remove reference-style links?
                .replace(/^\s{1,2}\[(.*?)\]: (\S+)( ".*?")?\s*$/g, "")
                // Remove atx-style headers
                .replace(/^(\n)?\s{0,}#{1,6}\s+| {0,}(\n)?\s{0,}#{0,} {0,}(\n)?\s{0,}$/gm, "$1$2$3")
                // Remove emphasis (repeat the line to remove double emphasis)
                .replace(/([\*_]{1,3})(\S.*?\S{0,1})\1/g, "$2")
                .replace(/([\*_]{1,3})(\S.*?\S{0,1})\1/g, "$2")
                // Remove code blocks
                .replace(/(`{3,})(.*?)\1/gm, "$2")
                // Remove inline code
                .replace(/`(.+?)`/g, "$1")
                // Replace two or more newlines with exactly two? Not entirely sure this belongs here...
                .replace(/\n{2,}/g, "\n\n");
        }
        catch (e) {
            console.error(e);
            return md;
        }
        return output;
    }
    Utils.removeMd = removeMd;
})(Utils || (Utils = {}));

var DUAL_URL = "http://127.0.0.1:3030";
var fetchEndpoint = function (endpoint, init) {
    return fetch(DUAL_URL + endpoint, init);
};
var getEndpoint = function (endpoint) { return fetchEndpoint(endpoint); };
var postEndpoint = function (endpoint, body) {
    return fetchEndpoint(endpoint, {
        method: "POST",
        headers: { Accept: "application/json", "Content-Type": "application/json" },
        body: JSON.stringify(body)
    });
};
var fetchQuery = function (query) {
    return getEndpoint("/query" + encodeURIComponent(query));
};
var fetchGenerate = function (body) {
    return postEndpoint("/generate", body);
};
var fetchSearch = function (body) { return postEndpoint("/search", body); };

var SkillManager = /** @class */ (function () {
    function SkillManager(app) {
        this.app = app;
    }
    // Returns result of following a command
    SkillManager.prototype.followCommand = function (command) {
        return __awaiter(this, void 0, void 0, function () {
            var skillPath, result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.matchCommand(command)];
                    case 1:
                        skillPath = _a.sent();
                        console.log("FOLLOWING", command, "USING", skillPath);
                        result = this.useSkill(skillPath, command);
                        return [2 /*return*/, result];
                }
            });
        });
    };
    // Uses a skill when following a command
    SkillManager.prototype.useSkill = function (skillPath, command) {
        return __awaiter(this, void 0, void 0, function () {
            var params, args, codeBlocks, _a, splitBlockList, blockTypes, _b, splitBlockList, result;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0: return [4 /*yield*/, this.loadSkillContents(skillPath)];
                    case 1:
                        _c.sent();
                        this.loadSkillMetadata(skillPath);
                        this.removeFrontMatter();
                        return [4 /*yield*/, this.getParams(this.skillContents)];
                    case 2:
                        params = _c.sent();
                        return [4 /*yield*/, this.getArgs(command, params)];
                    case 3:
                        args = _c.sent();
                        this.skillContents = this.resolveParams(this.skillContents, params, args);
                        codeBlocks = this.detectCodeBlocks();
                        _a = this.splitBlocks(codeBlocks), splitBlockList = _a[0], blockTypes = _a[1];
                        return [4 /*yield*/, this.interpretBlocks(splitBlockList, blockTypes)];
                    case 4:
                        _b = _c.sent(), splitBlockList = _b[0];
                        result = this.getLastBlock(splitBlockList);
                        return [2 /*return*/, result];
                }
            });
        });
    };
    // Walk through blocks and take actions based on them
    SkillManager.prototype.interpretBlocks = function (splitBlocks, blockTypes) {
        return __awaiter(this, void 0, void 0, function () {
            var newText, textSoFar, index, _a, _b, _c, _d, _e;
            return __generator(this, function (_f) {
                switch (_f.label) {
                    case 0:
                        textSoFar = "";
                        index = 0;
                        _f.label = 1;
                    case 1:
                        if (!(index < splitBlocks.length)) return [3 /*break*/, 8];
                        newText = this.resolveBodyReferences(splitBlocks, blockTypes, index, textSoFar);
                        splitBlocks[index] = newText;
                        _a = blockTypes[index];
                        switch (_a) {
                            case "text": return [3 /*break*/, 2];
                            case "js": return [3 /*break*/, 3];
                            case "dual": return [3 /*break*/, 5];
                        }
                        return [3 /*break*/, 7];
                    case 2:
                        textSoFar = textSoFar.concat(newText);
                        return [3 /*break*/, 7];
                    case 3:
                        _b = splitBlocks;
                        _c = index;
                        return [4 /*yield*/, this.waitEval(splitBlocks[index])];
                    case 4:
                        _b[_c] = _f.sent();
                        textSoFar = textSoFar.concat(splitBlocks[index]);
                        return [3 /*break*/, 7];
                    case 5:
                        _d = splitBlocks;
                        _e = index;
                        return [4 /*yield*/, this.followCommand(newText)];
                    case 6:
                        _d[_e] = _f.sent();
                        textSoFar = textSoFar.concat(splitBlocks[index] + " ");
                        _f.label = 7;
                    case 7:
                        index++;
                        return [3 /*break*/, 1];
                    case 8: return [2 /*return*/, [splitBlocks, textSoFar]];
                }
            });
        });
    };
    // Wait for eval wrapper
    SkillManager.prototype.waitEval = function (toEval) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, eval(toEval)];
            });
        });
    };
    // Fill in "#N" structures in skill body based on reference code block result
    SkillManager.prototype.resolveBodyReferences = function (splitBlocks, blockTypes, reachedIndex, textSoFar) {
        var newText = splitBlocks[reachedIndex];
        newText = newText.replace("#0", textSoFar);
        for (var referencedCodeBlock = 1; referencedCodeBlock <= reachedIndex; referencedCodeBlock++) {
            if (newText.includes("#" + referencedCodeBlock)) {
                var remainingCodeBlocks = referencedCodeBlock;
                for (var blockIndex = 0; blockIndex < splitBlocks.length && remainingCodeBlocks > 0; blockIndex++) {
                    if (splitBlocks[blockIndex].toString().trim() != "" ||
                        blockTypes[blockIndex] != "text") {
                        remainingCodeBlocks--;
                    }
                    if (remainingCodeBlocks == 0) {
                        newText = newText.replace("#" + referencedCodeBlock, splitBlocks[blockIndex]);
                    }
                }
            }
        }
        return newText;
    };
    SkillManager.prototype.getLastBlock = function (splitBlocks) {
        for (var blockIndex = splitBlocks.length - 1; blockIndex >= 0; blockIndex--) {
            if (splitBlocks[blockIndex].toString().trim() != "") {
                return splitBlocks[blockIndex];
            }
        }
    };
    // Get list of all blocks with type and contents
    SkillManager.prototype.splitBlocks = function (codeBlocks) {
        var splitBlockList = [this.skillContents], blockTypes = ["text"];
        for (var index = 0; index < codeBlocks.length; index++) {
            splitBlockList.push(codeBlocks[index]["contents"]);
            blockTypes.push(codeBlocks[index]["type"]);
            splitBlockList.push(splitBlockList[2 * index].slice(codeBlocks[index]["end"]));
            blockTypes.push("text");
            splitBlockList[2 * index] = splitBlockList[2 * index].slice(0, codeBlocks[index]["start"]);
            for (var indexFuture = index + 1; indexFuture < codeBlocks.length; indexFuture++) {
                codeBlocks[indexFuture]["start"] -=
                    splitBlockList[2 * index].length +
                        codeBlocks[index]["end"] -
                        codeBlocks[index]["start"];
                codeBlocks[indexFuture]["end"] -=
                    splitBlockList[2 * index].length +
                        codeBlocks[index]["end"] -
                        codeBlocks[index]["start"];
            }
        }
        return [splitBlockList, blockTypes];
    };
    // Get a list of code blocks with details
    SkillManager.prototype.detectCodeBlocks = function () {
        var m, res = [];
        var re = RegExp(/\`\`\`(?<type>\w+)(?<contents>(?:\`[^\`]|[^\`])*)\`\`\`/, "g");
        do {
            m = re.exec(this.skillContents);
            if (m) {
                res = res.concat({
                    type: m["groups"]["type"],
                    contents: m["groups"]["contents"].trim(),
                    start: m["index"],
                    end: m["index"] + m[0].length
                });
            }
        } while (m);
        return res;
    };
    // Get list of parameters mentioned in a skill
    SkillManager.prototype.getParams = function (document) {
        return __awaiter(this, void 0, void 0, function () {
            var re, params;
            return __generator(this, function (_a) {
                re = /\*[a-zA-Z0-9\s]*\*/g;
                params = document.match(re);
                if (params != null) {
                    params.forEach(function (val, index, params) {
                        params[index] = val.substring(1, val.length - 1);
                    });
                    return [2 /*return*/, params];
                }
                return [2 /*return*/, []];
            });
        });
    };
    // Parse arguments from the command
    SkillManager.prototype.getArgs = function (command, params) {
        return __awaiter(this, void 0, void 0, function () {
            var args, res, index;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        args = [];
                        index = 0;
                        _a.label = 1;
                    case 1:
                        if (!(index < params.length)) return [3 /*break*/, 4];
                        return [4 /*yield*/, this.getArg(command, params[index])];
                    case 2:
                        res = _a.sent();
                        args = args.concat(res);
                        _a.label = 3;
                    case 3:
                        index++;
                        return [3 /*break*/, 1];
                    case 4: return [2 /*return*/, args];
                }
            });
        });
    };
    // Parse one argument from the command
    SkillManager.prototype.getArg = function (command, param) {
        return __awaiter(this, void 0, void 0, function () {
            var prompt, rawResponse, content;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (param == Object.keys(this.skillMetadata[0])[0]) {
                            return [2 /*return*/, command];
                        }
                        prompt = this.getParamPrompt(command, param);
                        return [4 /*yield*/, fetchGenerate({
                                prompt: prompt,
                                context: [command],
                                generate_paragraphs: 1
                            })];
                    case 1:
                        rawResponse = _a.sent();
                        return [4 /*yield*/, rawResponse.json()];
                    case 2:
                        content = _a.sent();
                        content = content["output"][0].trim();
                        return [2 /*return*/, content];
                }
            });
        });
    };
    SkillManager.prototype.getParamPrompt = function (command, param) {
        var commandParam;
        var prompt;
        // TODO do ablation
        prompt = "Extract " + param + " from the following:\n\n";
        commandParam = Object.keys(this.skillMetadata[0])[0];
        this.skillMetadata.forEach(function (val, index, array) {
            if (commandParam in val && param in val) {
                if (Math.random() >= 0.6) {
                    prompt += val[commandParam] + " => " + val[param] + "\n\n";
                }
                else {
                    prompt += val[commandParam] + " =>  " + val[param] + "\n\n";
                }
            }
        });
        prompt += command + " => ";
        return prompt;
    };
    // Get two parallel lists of command examples and the paths they originate from
    SkillManager.prototype.getCommandExamples = function () {
        var _this = this;
        var commandExamples = [];
        var skillPaths = [];
        var commandExampleParam;
        var newCommandExample;
        this.app.vault.getMarkdownFiles().forEach(function (file) {
            if (file.path.startsWith("skillset")) {
                commandExampleParam = Object.keys(_this.app.metadataCache.getFileCache(file).frontmatter[0])[0];
                _this.app.metadataCache
                    .getFileCache(file)
                    .frontmatter.forEach(function (val, index, array) {
                    if (commandExampleParam in val) {
                        newCommandExample = val[commandExampleParam];
                        Object.entries(val).forEach(function (field, fieldIndex, fieldArray) {
                            if (fieldIndex > 0) {
                                newCommandExample = newCommandExample.replace(field[1], " ___ ");
                            }
                        });
                        commandExamples = commandExamples.concat(newCommandExample);
                        skillPaths = skillPaths.concat(file.path);
                    }
                });
            }
        });
        return [commandExamples, skillPaths];
    };
    // Get contents of a skill at a path
    SkillManager.prototype.loadSkillContents = function (skillPath) {
        return __awaiter(this, void 0, void 0, function () {
            var markdownFiles, index, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        markdownFiles = this.app.vault.getMarkdownFiles();
                        index = 0;
                        _b.label = 1;
                    case 1:
                        if (!(index < markdownFiles.length)) return [3 /*break*/, 4];
                        if (!(markdownFiles[index].path == skillPath)) return [3 /*break*/, 3];
                        _a = this;
                        return [4 /*yield*/, this.app.vault.cachedRead(markdownFiles[index])];
                    case 2:
                        _a.skillContents = _b.sent();
                        _b.label = 3;
                    case 3:
                        index++;
                        return [3 /*break*/, 1];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    // Get metadata of a skill at a path
    SkillManager.prototype.loadSkillMetadata = function (skillPath) {
        var markdownFiles = this.app.vault.getMarkdownFiles();
        for (var index = 0; index < markdownFiles.length; index++) {
            if (markdownFiles[index].path == skillPath) {
                this.skillMetadata = this.app.metadataCache.getFileCache(markdownFiles[index]).frontmatter;
            }
        }
    };
    // Find closest skill to a given command through examples
    SkillManager.prototype.matchCommand = function (command) {
        return __awaiter(this, void 0, void 0, function () {
            var examplePathPairs, examples, paths, rawResponse, content;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        // Hide quoted content from command matching
                        command = command.replace(/"[\s\S]*"/, '""');
                        examplePathPairs = this.getCommandExamples();
                        examples = examplePathPairs[0], paths = examplePathPairs[1];
                        return [4 /*yield*/, fetchSearch({
                                prompt: command,
                                context: examples,
                                generate_paragraphs: 1
                            })];
                    case 1:
                        rawResponse = _a.sent();
                        return [4 /*yield*/, rawResponse.json()];
                    case 2:
                        content = _a.sent();
                        return [2 /*return*/, paths[content["output"][0]]];
                }
            });
        });
    };
    // Substitute parameters with arguments in a skill
    SkillManager.prototype.resolveParams = function (document, params, args) {
        for (var index = 0; index < params.length; index++) {
            var re = RegExp("\\*" + params[index] + "\\*", "g");
            document = document.replace(re, args[index]);
        }
        return document;
    };
    SkillManager.prototype.removeFrontMatter = function () {
        this.skillContents = this.skillContents.replace(/---[\s\S]*---/g, "");
    };
    SkillManager.prototype.getNotes = function () {
        return __awaiter(this, void 0, void 0, function () {
            var markdownFiles, notes, index, note;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        markdownFiles = this.app.vault.getMarkdownFiles();
                        notes = [];
                        index = 0;
                        _a.label = 1;
                    case 1:
                        if (!(index < markdownFiles.length)) return [3 /*break*/, 4];
                        if (!!markdownFiles[index].path.startsWith("skillset")) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.app.vault.cachedRead(markdownFiles[index])];
                    case 2:
                        note = _a.sent();
                        note = Utils.removeMd(note);
                        notes.push(note);
                        _a.label = 3;
                    case 3:
                        index++;
                        return [3 /*break*/, 1];
                    case 4: return [2 /*return*/, notes];
                }
            });
        });
    };
    return SkillManager;
}());
/*
argmin => Argmin

reward systems => neural systems which regulate reward

RNNs and backpropagation => backpropagation through time with RNNs

metaphors of concepts => concepts are associated with rooms

NCC => neural correlates of consciousness

*topic* =>
*/

var contentId = "dual-content";
var statusId = "dual-status";
var inputId = "dual-input";
var ChatView = /** @class */ (function (_super) {
    __extends(ChatView, _super);
    function ChatView(leaf, customName) {
        var _this = _super.call(this, leaf) || this;
        _this.customName = "";
        _this.customName = customName;
        return _this;
    }
    ChatView.prototype.getViewType = function () {
        return "chat";
    };
    ChatView.prototype.getDisplayText = function () {
        return "Dual";
    };
    ChatView.prototype.getIcon = function () {
        return "info";
    };
    ChatView.prototype.sendMessage = function () {
        var _this = this;
        var input = document.getElementById(inputId);
        var replied = false;
        if (input.value !== "") {
            this.drawMessage(input.value, "right");
            new Promise(function (resolve) {
                return setTimeout(resolve, 3000);
            }).then(function () {
                if (replied == false) {
                    _this.setStatus("typing...");
                }
            });
            // TODO: Move text sanitation code out of View
            var skillManager = new SkillManager(this.app);
            skillManager.followCommand(input.value).then(function (response) {
                response
                    .toString()
                    .split("\n\n")
                    .forEach(function (res) {
                    if (res.trim() != "") {
                        _this.drawMessage(res, "left");
                    }
                });
                replied = true;
                _this.setStatus("online");
            });
            input.value = "";
        }
    };
    ChatView.prototype.makeRequest = function (query) {
        return __awaiter(this, void 0, void 0, function () {
            var response, responseJSON;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, fetchQuery(query)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.json()];
                    case 2:
                        responseJSON = _a.sent();
                        return [2 /*return*/, responseJSON];
                }
            });
        });
    };
    ChatView.prototype.load = function () {
        _super.prototype.load.call(this);
        this.draw();
    };
    ChatView.prototype.draw = function () {
        var _this = this;
        var container = this.containerEl.children[1];
        // Root node
        var rootEl = document.createElement("div");
        rootEl.id = "dual-root";
        // Header
        var headerDiv = rootEl.createEl("header", {
            attr: { id: "dual-header" }
        });
        // Title and status
        headerDiv.createEl("h3", {
            cls: "dual-header-title",
            text: this.customName
        });
        headerDiv.createEl("h6", { text: "Online", attr: { id: statusId } });
        // Conversation content
        rootEl.createDiv({ attr: { id: contentId } });
        // Footer
        var footerDiv = rootEl.createEl("footer", {
            attr: { id: "dual-footer" }
        });
        // Input element
        var input = footerDiv.createEl("input", {
            type: "text",
            attr: { id: inputId, size: 1 }
        });
        // Send button
        var button = footerDiv.createEl("button", {
            text: "Send",
            attr: { id: "dual-btn-send" }
        });
        this.registerDomEvent(button, "click", function () { return _this.sendMessage(); });
        this.registerDomEvent(input, "keydown", function (event) {
            if (event.key === "Enter") {
                _this.sendMessage();
            }
        });
        container.empty();
        container.appendChild(rootEl);
    };
    ChatView.prototype.drawMessage = function (content, side) {
        var conversationDiv = document.getElementById(contentId);
        var msg = conversationDiv.createDiv({ cls: "dual-msg dual-msg-" + side });
        obsidian.MarkdownRenderer.renderMarkdown(content, msg, this.app.vault.getRoot().path, new obsidian.Component());
        conversationDiv.scrollBy(0, 1000);
    };
    ChatView.prototype.setStatus = function (content) {
        var statusP = document.getElementById(statusId);
        statusP.setText(content);
    };
    return ChatView;
}(obsidian.ItemView));

var DEFAULT_SETTINGS = {
    customName: "Dual"
};
var MyPlugin = /** @class */ (function (_super) {
    __extends(MyPlugin, _super);
    function MyPlugin() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MyPlugin.prototype.onload = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.loadSettings()];
                    case 1:
                        _a.sent();
                        this.registerView("chat", function (leaf) {
                            return new ChatView(leaf, _this.settings.customName);
                        });
                        this.app.workspace.layoutReady && this.initLeaf(this.app.workspace);
                        this.registerEvent(this.app.workspace.on("layout-ready", function () {
                            return _this.initLeaf(_this.app.workspace);
                        }));
                        this.addSettingTab(new SampleSettingTab(this.app, this));
                        this.addCommand({
                            id: "focus-dual-input",
                            name: "Focus Dual input box",
                            callback: function () { return document.getElementById(inputId).focus(); }
                        });
                        return [2 /*return*/];
                }
            });
        });
    };
    MyPlugin.prototype.initLeaf = function (workspace) {
        if (workspace.getLeavesOfType("chat").length == 0) {
            workspace.getRightLeaf(false).setViewState({
                type: "chat"
            });
        }
    };
    MyPlugin.prototype.loadSettings = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a, _b, _c, _d;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        _a = this;
                        _c = (_b = Object).assign;
                        _d = [{}, DEFAULT_SETTINGS];
                        return [4 /*yield*/, this.loadData()];
                    case 1:
                        _a.settings = _c.apply(_b, _d.concat([_e.sent()]));
                        return [2 /*return*/];
                }
            });
        });
    };
    MyPlugin.prototype.saveSettings = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.saveData(this.settings)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    return MyPlugin;
}(obsidian.Plugin));
var SampleSettingTab = /** @class */ (function (_super) {
    __extends(SampleSettingTab, _super);
    function SampleSettingTab(app, plugin) {
        var _this = _super.call(this, app, plugin) || this;
        _this.app = app;
        _this.plugin = plugin;
        return _this;
    }
    SampleSettingTab.prototype.display = function () {
        var _this = this;
        var containerEl = this.containerEl;
        containerEl.empty();
        containerEl.createEl("h3", {
            text: "Follow these instructions to set up your Dual:"
        });
        new obsidian.Setting(containerEl)
            .setName("getOS() test")
            .setDesc("Press the button.")
            .addButton(function (cb) {
            cb.setButtonText("Install Python")
                .setClass("mod-cta")
                .onClick(function () { return __awaiter(_this, void 0, void 0, function () {
                var basePath, dualServerPath, dualAbsoluteBinaryPath, dualRelativeBinaryPath, dualAbsoluteTorchPath, dualRelativeTorchPath, torchURL, dualServerURL, response, blob, _a, _b, _c, response, blob, _d, _e, _f;
                return __generator(this, function (_g) {
                    switch (_g.label) {
                        case 0:
                            if (this.app.vault.adapter instanceof obsidian.FileSystemAdapter) {
                                basePath = this.app.vault.adapter.getBasePath();
                            }
                            if (Utils.getOS() == "linux") {
                                new obsidian.Notice("Setting up dual-server using dual-obsidian-client...");
                                dualServerPath = basePath + "/.obsidian/plugins/Dual/server";
                                dualAbsoluteBinaryPath = dualServerPath + "/dual-server-linux";
                                dualRelativeBinaryPath =
                                    "/.obsidian/plugins/Dual/server/dual-server-linux";
                                dualAbsoluteTorchPath = dualServerPath + "/libtorch.zip";
                                dualRelativeTorchPath =
                                    "/.obsidian/plugins/Dual/server/libtorch.zip";
                                dualServerURL =
                                    "https://github.com/Psionica/dual-server/releases/download/master-b7ea8b18/dual-server-linux";
                                torchURL =
                                    "https://download.pytorch.org/libtorch/cpu/libtorch-shared-with-deps-1.9.0%2Bcpu.zip";
                            }
                            if (!fs__namespace.existsSync(dualServerPath)) {
                                fs__namespace.mkdirSync(dualServerPath);
                            }
                            if (!!fs__namespace.existsSync(dualAbsoluteBinaryPath)) return [3 /*break*/, 5];
                            new obsidian.Notice("Downloading dual-server...");
                            return [4 /*yield*/, fetch(dualServerURL)];
                        case 1:
                            response = _g.sent();
                            return [4 /*yield*/, response.blob()];
                        case 2:
                            blob = _g.sent();
                            _b = (_a = this.app.vault)
                                .createBinary;
                            _c = [dualRelativeBinaryPath];
                            return [4 /*yield*/, blob.arrayBuffer()];
                        case 3: return [4 /*yield*/, _b.apply(_a, _c.concat([_g.sent()]))
                                .then(function () {
                                new obsidian.Notice("Download complete!");
                            })];
                        case 4:
                            _g.sent();
                            _g.label = 5;
                        case 5:
                            if (!!fs__namespace.existsSync(dualAbsoluteTorchPath)) return [3 /*break*/, 10];
                            new obsidian.Notice("Downloading libtorch...");
                            return [4 /*yield*/, fetch(torchURL)];
                        case 6:
                            response = _g.sent();
                            return [4 /*yield*/, response.blob()];
                        case 7:
                            blob = _g.sent();
                            _e = (_d = this.app.vault)
                                .createBinary;
                            _f = [dualRelativeTorchPath];
                            return [4 /*yield*/, blob.arrayBuffer()];
                        case 8: return [4 /*yield*/, _e.apply(_d, _f.concat([_g.sent()]))
                                .then(function () {
                                new obsidian.Notice("Download complete!");
                            })];
                        case 9:
                            _g.sent();
                            _g.label = 10;
                        case 10: return [2 /*return*/];
                    }
                });
            }); });
        });
        new obsidian.Setting(containerEl)
            .setName("0. Install Python (3.8+).")
            .setDesc("Press the button to head over to the download page.")
            .addButton(function (cb) {
            return cb
                .setButtonText("Install Python")
                .setClass("mod-cta")
                .onClick(function () {
                window.open("https://www.python.org/downloads/");
            });
        });
        new obsidian.Setting(containerEl)
            .setName("1. Copy snapshot.")
            .setDesc("Press the button to copy the entire vault as concatenated plain text.")
            .addButton(function (cb) {
            return cb
                .setButtonText("Copy snapshot")
                .setClass("mod-cta")
                .onClick(function () {
                new obsidian.Notice("Loading files...");
                var concatenated = "";
                // TODO Use Promise.all() / map / reduce
                _this.app.vault.getMarkdownFiles().forEach(function (element) {
                    _this.app.vault.cachedRead(element).then(function (res) {
                        res = res
                            .replace(/^---[\s\S]*---\n*/g, "")
                            .replace(/\[\[[^\|\[\]]*\|([^\|\[\]]*)\]\]/g, "$1")
                            .replace(/\[\[(.*)\]\]/g, "$1")
                            .replace(/```([^`])*```\n*/g, "")
                            .replace(/\$([^$])*\$*/g, "");
                        concatenated = concatenated.concat(res, "\n\n");
                    });
                });
                new Promise(function (resolve) {
                    return setTimeout(resolve, 3000);
                }).then(function () {
                    concatenated = concatenated.slice(0, 5000000);
                    concatenated = Utils.removeMd(concatenated);
                    Utils.copyStringToClipboard(concatenated);
                    new obsidian.Notice("Snapshot successfully copied to clipboard!");
                });
            });
        });
        new obsidian.Setting(containerEl)
            .setName("2. Derive the essence.")
            .setDesc("After following the online instructions, extract 'essence.zip' in '.obsidian/plugins/Dual/'.")
            .addButton(function (cb) {
            return cb
                .setButtonText("Start alignment")
                .setClass("mod-cta")
                .onClick(function () {
                window.open("https://colab.research.google.com/drive/1CObehan5gmYO-TvyyYq973a3h-_EYr9_?usp=sharing");
            });
        });
        new obsidian.Setting(containerEl)
            .setName("3. Configure the skeleton.")
            .setDesc("Run 'python3 -m pip install -r requirements.txt' in '.obsidian/plugins/Dual/skeleton/'.");
        new obsidian.Setting(containerEl)
            .setName("4. Run the skeleton after you configured the essence.")
            .setDesc("Run 'python3 server.py --path /path/to/your/vault/' in '.obsidian/plugins/Dual/skeleton/'.");
        new obsidian.Setting(containerEl)
            .setName("5. Restart Obsidian.")
            .setDesc("Head over to the right side panel to talk with your Dual!");
        containerEl.createEl("h3", {
            text: "Congratulations on setting up your Dual!"
        });
        new obsidian.Setting(containerEl)
            .setName("Custom name")
            .setDesc("Customize your Dual's name using the input box. Reload Obsidian for this to take effect.")
            .addText(function (text) {
            return text
                .setPlaceholder("Dual")
                .setValue("")
                .onChange(function (value) { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.plugin.settings.customName = value;
                            return [4 /*yield*/, this.plugin.saveSettings()];
                        case 1:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            }); });
        });
        new obsidian.Setting(containerEl)
            .setName("Get involved!")
            .addButton(function (cb) {
            return cb
                .setButtonText("Report bugs")
                .setClass("mod-cta")
                .onClick(function () {
                window.open("https://github.com/Psionica/Dual/issues");
            });
        })
            .addButton(function (cb) {
            return cb
                .setButtonText("Join Psionica")
                .setClass("mod-cta")
                .onClick(function () {
                window.open("https://psionica.org/");
            });
        });
    };
    return SampleSettingTab;
}(obsidian.PluginSettingTab));

module.exports = MyPlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
